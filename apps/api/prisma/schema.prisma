generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ==================== USER MANAGEMENT ====================

model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique @db.VarChar(255)
  emailNormalized   String    @unique @db.VarChar(255)
  companyCustomerId String?   @db.VarChar(100)
  subscriptionTier  String    @default("free") @db.VarChar(50)
  
  verified          Boolean   @default(false)
  verifiedAt        DateTime?
  
  firstName         String?   @db.VarChar(100)
  lastName          String?   @db.VarChar(100)
  phoneNumber       String?   @db.VarChar(20)
  timezone          String    @default("UTC") @db.VarChar(50)
  locale            String    @default("en-US") @db.VarChar(10)
  
  lastLoginAt       DateTime?
  lastLoginIp       String?   @db.Inet
  failedLoginAttempts Int     @default(0)
  lockedUntil       DateTime?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  
  verificationTokens VerificationToken[]
  refreshTokens      RefreshToken[]
  conversations      Conversation[]
  messages           Message[]
  auditLogs          AuditLog[]
  rateLimitRecords   RateLimitRecord[]
  sessions           UserSession[]
  
  @@index([emailNormalized])
  @@index([companyCustomerId])
  @@index([verified])
  @@index([deletedAt])
  @@map("users")
}

// ==================== AUTHENTICATION ====================

model VerificationToken {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  token       String   @unique @db.VarChar(255)
  code        String   @db.VarChar(6)
  type        String   @db.VarChar(50)
  
  expiresAt   DateTime
  usedAt      DateTime?
  attempts    Int      @default(0)
  
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([code, userId])
  @@index([expiresAt])
  @@index([type])
  @@map("verification_tokens")
}

model RefreshToken {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  token        String   @unique @db.Text
  tokenFamily  String   @db.Uuid
  
  expiresAt    DateTime
  issuedAt     DateTime @default(now())
  revokedAt    DateTime?
  revokedReason String?  @db.VarChar(255)
  
  deviceId     String?  @db.VarChar(255)
  deviceName   String?  @db.VarChar(255)
  userAgent    String?  @db.Text
  ipAddress    String?  @db.Inet
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([tokenFamily])
  @@index([userId, revokedAt])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model UserSession {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  sessionToken String   @unique @db.VarChar(255)
  
  ipAddress    String   @db.Inet
  userAgent    String   @db.Text
  deviceId     String?  @db.VarChar(255)
  
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([sessionToken])
  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

// ==================== CONVERSATIONS & MESSAGES ====================

model Conversation {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  
  title        String   @db.VarChar(255)
  summary      String?  @db.Text
  status       String   @default("active") @db.VarChar(20)
  
  context      Json?
  metadata     Json?
  tags         String[] @default([])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  closedAt     DateTime?
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]
  
  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([tags])
  @@map("conversations")
}

model Message {
  id              String   @id @default(uuid()) @db.Uuid
  conversationId  String   @db.Uuid
  userId          String   @db.Uuid
  
  role            String   @db.VarChar(20)
  content         String   @db.Text
  
  tokenCount      Int?
  modelUsed       String?  @db.VarChar(100)
  
  metadata        Json?
  attachments     Json?
  
  isEdited        Boolean  @default(false)
  editedAt        DateTime?
  
  createdAt       DateTime @default(now())
  
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([conversationId, createdAt])
  @@index([userId])
  @@map("messages")
}

// ==================== AUDIT & SECURITY ====================

model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String?  @db.Uuid
  
  action      String   @db.VarChar(100)
  entity      String   @db.VarChar(100)
  entityId    String?  @db.VarChar(255)
  
  oldValues   Json?
  newValues   Json?
  metadata    Json?
  
  ipAddress   String?  @db.Inet
  userAgent   String?  @db.Text
  
  severity    String   @default("info") @db.VarChar(20)
  
  timestamp   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([entity, entityId])
  @@index([timestamp])
  @@index([severity])
  @@map("audit_logs")
}

model RateLimitRecord {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String?  @db.Uuid
  ipAddress   String   @db.Inet
  
  endpoint    String   @db.VarChar(255)
  attempts    Int      @default(1)
  
  windowStart DateTime @default(now())
  windowEnd   DateTime
  
  blocked     Boolean  @default(false)
  blockedAt   DateTime?
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, ipAddress, endpoint, windowStart])
  @@index([userId])
  @@index([ipAddress])
  @@index([endpoint])
  @@index([windowEnd])
  @@map("rate_limit_records")
}